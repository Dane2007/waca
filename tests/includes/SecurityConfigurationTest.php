<?php

class SecurityConfigurationTest extends PHPUnit_Framework_Test
{
 private $user; public function setUp() { $this->user = $this->getMockBuilder(User::class)->getMock(); $this->user->method('isAdmin')->willReturn(false); $this->user->method('isUser')->willReturn(false); $this->user->method('isCheckuser')->willReturn(false); $this->user->method('isDeclined')->willReturn(false); $this->user->method('isSuspended')->willReturn(false); $this->user->method('isNew')->willReturn(false); $this->user->method('isCommunityUser')->willReturn(false); } public function testAllowsAdmin() { $user->method('isAdmin')->willReturn(true); $config = new SecurityConfiguration()->setAdmin(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsUser() { $user->method('isUser')->willReturn(true); $config = new SecurityConfiguration()->setUser(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsCheckuser() { $user->method('isCheckuser')->willReturn(true); $config = new SecurityConfiguration()->setCheckuser(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsDeclined() { $user->method('isDeclined')->willReturn(true); $config = new SecurityConfiguration()->setDeclined(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsSuspended() { $user->method('isSuspended')->willReturn(true); $config = new SecurityConfiguration()->setSuspended(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsNew() { $user->method('isNew')->willReturn(true); $config = new SecurityConfiguration()->setNew(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsCommunity() { $user->method('isCommunityUser')->willReturn(true); $config = new SecurityConfiguration()->setCommunity(SecurityConfiguration::ALLOW); $this->assertTrue($config->allows($user)); } public function testAllowsAdminWithNonApplicableDeny() { $user->method('isAdmin')->willReturn(true); $config = new SecurityConfiguration()->setAdmin(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsUserWithNonApplicableDeny() { $user->method('isUser')->willReturn(true); $config = new SecurityConfiguration()->setUser(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsCheckuserWithNonApplicableDeny() { $user->method('isCheckuser')->willReturn(true); $config = new SecurityConfiguration()->setCheckuser(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsDeclinedWithNonApplicableDeny() { $user->method('isDeclined')->willReturn(true); $config = new SecurityConfiguration()->setDeclined(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsSuspendedWithNonApplicableDeny() { $user->method('isSuspended')->willReturn(true); $config = new SecurityConfiguration()->setSuspended(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsNewWithNonApplicableDeny() { $user->method('isNew')->willReturn(true); $config = new SecurityConfiguration()->setNew(SecurityConfiguration::ALLOW)->setAdmin(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsCommunityWithNonApplicableDeny() { $user->method('isCommunityUser')->willReturn(true); $config = new SecurityConfiguration()->setCommunity(SecurityConfiguration::ALLOW)->setNew(SecurityConfiguration::DENY); $this->assertTrue($config->allows($user)); } public function testAllowsAdminWithApplicableDeny() { $user->method('isAdmin')->willReturn(true); $config = new SecurityConfiguration()->setAdmin(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsUserWithApplicableDeny() { $user->method('isUser')->willReturn(true); $config = new SecurityConfiguration()->setUser(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsCheckuserWithApplicableDeny() { $user->method('isCheckuser')->willReturn(true); $config = new SecurityConfiguration()->setCheckuser(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsDeclinedWithApplicableDeny() { $user->method('isDeclined')->willReturn(true); $config = new SecurityConfiguration()->setDeclined(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsSuspendedWithApplicableDeny() { $user->method('isSuspended')->willReturn(true); $config = new SecurityConfiguration()->setSuspended(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsNewWithApplicableDeny() { $user->method('isNew')->willReturn(true); $config = new SecurityConfiguration()->setNew(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsCommunityWithApplicableDeny() { $user->method('isCommunityUser')->willReturn(true); $config = new SecurityConfiguration()->setCommunity(SecurityConfiguration::DENY); $this->assertFalse($config->allows($user)); } public function testAllowsAdminWithDefault() { $user->method('isAdmin')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsUserWithDefault() { $user->method('isUser')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsCheckuserWithDefault() { $user->method('isCheckuser')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsDeclinedWithDefault() { $user->method('isDeclined')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsSuspendedWithDefault() { $user->method('isSuspended')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsNewWithDefault() { $user->method('isNew')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); } public function testAllowsCommunityWithDefault() { $user->method('isCommunityUser')->willReturn(true); $config = new SecurityConfiguration(); $this->assertFalse($config->allows($user)); }
}